# SPDX-FileCopyrightText: 2024-present Stuart Ellis <stuart@stuartellis.name>
#
# SPDX-License-Identifier: MIT
#
# Configuration for the Task runner
#
# See: https://taskfile.dev
#
# Required tools:
#
# - pre-commit: https://pre-commit.com
# - Trivy: https://aquasecurity.github.io/trivy
#
# The *setup* task installs pip-tools and project dependencies:
#
#  - pip-tools: https://pip-tools.readthedocs.io
#
# Other tasks expect these dependencies to be in the Python virtual environment:
#
# - mkdocs: https://www.mkdocs.org/
# - mypy: https://www.mypy-lang.org
# - pytest: https://pytest.org
# - pytest-cov: https://pytest-cov.readthedocs.io
# - pytest-randomly: https://pypi.org/project/pytest-randomly/
# - setuptools-scm: https://setuptools-scm.readthedocs.io
#
# yamllint disable rule:line-length

version: "3"

silent: true

vars:
  PY_HOST_EXE: python3
  PY_VENV_EXE: .venv/bin/python3

tasks:
  default:
    cmds:
      - task: list

  build:
    desc: Build artifacts
    cmds:
      - "{{.PY_VENV_EXE}} -m piptools compile -o requirements-{{OS}}-developer.txt -q --all-extras pyproject.toml"
      - "{{.PY_VENV_EXE}} -m piptools compile -o requirements-{{OS}}.txt -q pyproject.toml"

  clean:
    desc: Delete generated files for project
    cmds:
      - "{{.PY_VENV_EXE}} -m ruff clean -q"
      - for:
          [
            "__pycache__",
            ".coverage",
            ".mypy_cache",
            ".pytest_cache",
            "dist",
            "site",
            "tmp",
          ]
        cmd: rm -fr {{ .ITEM }}

  docs:
    desc: Run Website for project documentation
    cmds:
      - "{{.PY_VENV_EXE}} -m mkdocs serve"

  fmt:
    desc: Format code
    aliases: [format]
    cmds:
      - "{{.PY_VENV_EXE}} -m ruff check --select I --fix -q"
      - "{{.PY_VENV_EXE}} -m ruff format -q"

  lint:
    desc: Run all checks
    aliases: [check]
    cmds:
      - pre-commit run --all-files

  list:
    desc: List available tasks
    cmds:
      - task --list

  setup:
    desc: Set up environment for development
    aliases: [bootstrap]
    cmds:
      - "{{.PY_HOST_EXE}} -m venv .venv"
      - "{{.PY_VENV_EXE}} -m pip install -q --disable-pip-version-check --require-virtualenv '.[pip-tools]'"
      - "{{.PY_VENV_EXE}} -m piptools sync -q requirements-{{OS}}-developer.txt"
      - "{{.PY_VENV_EXE}} -m pip install -q --disable-pip-version-check --require-virtualenv -e ."
      - pre-commit install

  test:
    desc: Run all linting and tests
    cmds:
      - task: lint
      - task: py:unit

  upgrade:
    desc: Upgrade requirements files
    cmds:
      - "{{.PY_VENV_EXE}} -m piptools compile -o requirements-{{OS}}-developer.txt -q -U --all-extras pyproject.toml"
      - "{{.PY_VENV_EXE}} -m piptools compile -o requirements-{{OS}}.txt -q -U pyproject.toml"

  version:
    desc: Get current project version
    cmds:
      - "echo {{.PROJECT_VERSION}}"
    vars:
      PROJECT_VERSION:
        sh: "{{.PY_VENV_EXE}} -m setuptools_scm"

  py:lint:
    desc: Run Python checks
    cmds:
      - for:
          [
            "ruff",
            "ruff-format",
            "mypy",
          ]
        cmd: pre-commit run {{.ITEM}} --all-files

  py:test:
    desc: Run all Python linting and tests
    cmds:
      - task: py:lint
      - task: py:unit

  py:unit:
    desc: Run Python unit tests
    cmds:
      - "{{.PY_VENV_EXE}} -m pytest"
